<?php
/**
 * Generate Mn nonspacing combining marks unit test data for remove_accents().
 *
 * See http://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txt
 */

$basename = basename( __FILE__ );
$dirname = dirname( __FILE__ );
$dirdirname = dirname( $dirname );

require $dirname . '/functions.php';

// Arguments.

$opts = getopt( 'v:' );
$version = isset( $opts['v'] ) ? $opts['v'] : '5.0.0';

$excludes = array(
	0x302e => true, 0x302f => true, // NOTE: U+302E & U+302F recategorized as Mc in Unicode 6.1.0
);

if ( ! function_exists( '__' ) ) {
	function __( $str, $td ) { return $str; }
}

// Open the unicode file.

$filename = '/tests/UCD-' . $version . '/UnicodeData.txt';
$file = $dirdirname . $filename;
error_log( "$basename: reading file=$file" );

// Callback for Unicode data file parser.
function parse_unicode_data_cb( &$codepoints, $cp, $name, $parts, $in_interval, $first_cp, $last_cp ) {
	global $excludes;
	if ( 'Mn' === $parts[UNFC_UCD_GENERAL_CATEGORY] ) {
		if ( empty( $excludes[ $cp ] ) ) {
			$codepoints[] = $cp;
		}
	}
}

// Read the file.

$codepoints = unfc_parse_unicode_data( $file, 'parse_unicode_data_cb' );
if ( false === $codepoints ) {
	/* translators: %s: file name */
	$error = sprintf( __( 'Could not read unicode data file "%s"', 'unfc' ), $file );
	error_log( $error );
	return $error;
}

$ranges = unfc_unicode_ranges_from_codepoints( $codepoints );

// Output.

$indent = "\t\t";
$out = array();
$out[] =  '<?php';
$out[] = $indent . '// Generated by "' . $basename . '" from "http://www.unicode.org/Public/' . $version . '/ucd/UnicodeData.txt".';

$out[] = $indent . '$code_points = array_merge(';

$range_sprintf =  '  range( 0x%x, 0x%x )';
$array_sprintf = '  array( 0x%x )';
foreach ( $ranges as $range ) {
	if ( is_array( $range ) ) {
		$out[] = $indent . "\t" . sprintf( $range_sprintf, $range[0], $range[1] );
	} else {
		$out[] = $indent . "\t" . sprintf( $array_sprintf, $range );
	}
	$range_sprintf =  ', range( 0x%x, 0x%x )';
	$array_sprintf = ', array( 0x%x )';
}
$out[] = $indent . '); // ' . count( $codepoints ) . ' code points';

$out = implode( "\n", $out ) . "\n";

echo $out;
